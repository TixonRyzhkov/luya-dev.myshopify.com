{% schema %}
    {
        "name": "Product recommendations",
        "class": "product-recommendations",
        "settings": []
    }
{% endschema %}

<div 
    class="product-recommendations__wrapper wrapper product-recommendations-content"
    data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4&intent=related"
>
    {%- if recommendations.performed? and recommendations.products_count > 0 -%}
        {% if recommendations.intent == 'related' %}
            <h2 class="product-recommendations__title title">You may also like</h2>
        {% elsif recommendations.intent == 'complementary' %}
            <h2 class="product-recommendations__title title">Pair it with</h2>
        {% endif %}

        <div class="product-recommendations__list">
            {%- for product in recommendations.products -%}
                <a class="product-recommendations-item" href="{{ product.url }}">
                    <div class="product-recommendations-item__image">
                        {{ product | image_url: width: 360 | image_tag: class: 'ofc', loading: 'lazy' }}
                    </div>

                    <div class="product-recommendations-item__title">{{ product.title }}</div>
                    <div class="product-recommendations-item__price">{{ product.price | money}}</div>
                </a>
            {%- endfor -%}
        </div>
    {%- endif -%}
</div>

{% javascript %}
const handleIntersection = (entries, observer) => {
    if (!entries[0].isIntersecting) return;

        observer.unobserve(productRecommendationsSection);

        const url = productRecommendationsSection.dataset.url;

        fetch(url)
        .then(response => response.text())
        .then(text => {
        const html = document.createElement('div');
        html.innerHTML = text;
        const recommendations = html.querySelector('.product-recommendations-content');

        if (recommendations && recommendations.innerHTML.trim().length) {
            productRecommendationsSection.innerHTML = recommendations.innerHTML;
        }
    })
    .catch(e => {
        console.error(e);
    });
};

const productRecommendationsSection = document.querySelector('.product-recommendations-content');
const observer = new IntersectionObserver(handleIntersection, {rootMargin: '0px 0px 200px 0px'});

observer.observe(productRecommendationsSection);
{% endjavascript %}

